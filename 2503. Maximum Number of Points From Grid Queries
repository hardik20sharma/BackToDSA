#define pii pair<int, int>
#define pip pair<int, pii>

class Solution {

    bool isValid(int x, int y, int m, int n) {
        return 0 <= x && x < m && 0 <= y && y < n;
    }

public:
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        
        set<int> sq(queries.begin(), queries.end());

        int m = grid.size();
        int n = grid[0].size();
        int cnt = 0;
        vector<vector<int>> dirs { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };

        unordered_map<int, int> mp;
        priority_queue<pip, vector<pip>, greater<pip>> pq;
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        
        pq.push( {grid[0][0], {0, 0}} );
        visited[0][0] = true;

        for(int query : sq) {

            while(!pq.empty()) {
                auto curr = pq.top();
                pq.pop();

                int val = curr.first;
                int x = curr.second.first, y = curr.second.second;

                if(val >= query) { // We can't process it now, val is greater than query
                    pq.push(curr);
                    break;
                }

                cnt++;

                for(auto dir : dirs) {
                    int newX = x + dir[0], newY = y + dir[1];

                    if(isValid(newX, newY, m, n) && !visited[newX][newY]) {
                        visited[newX][newY] = true;
                        pq.push( {grid[newX][newY], {newX, newY} } );
                    }
                }
            }

            mp[query] = cnt;
        }

        vector<int> res(queries.begin(), queries.end());
        
        for(int i = 0; i < res.size(); i++)
            res[i] = mp[queries[i]];
        
        return res;
    }
};
