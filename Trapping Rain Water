vector<int> rightMax(vector<int> &arr) {

    vector<int> res(arr.size());
    res[res.size() - 1] = arr[arr.size() - 1];

    for(int i = res.size() - 2; i >= 0; i--)
        res[i] = max(res[i+1], arr[i]);

    return res;
}

vector<int> leftMax(vector<int> &arr) {

    vector<int> res(arr.size());
    res[0] = arr[0];
    
    for(int i = 1; i < arr.size(); i++)
        res[i] = max(res[i-1], arr[i]);
    
    return res;
}

long long trappingWater(vector<int> &arr) {

    vector<int> left = leftMax(arr);
    vector<int> right = rightMax(arr);

    long long res = 0;

    for(int i = 0; i < arr.size(); i++)
        res += min(left[i], right[i]) - arr[i];

    return res;
}
