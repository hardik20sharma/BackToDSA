bool possible(int i, int j, int n) {
    return (i >= 0 && j >= 0 && i < n && j < n);
}

int minStepToReachTarget(vector<int> &knightPos, vector<int> &targetPos, int n) {
    
    vector<vector<int>> movements { {2, 1}, {1, 2}, {-2, 1}, {-1, 2}, {2, -1}, {1, -2}, {-2, -1}, {-1, -2} };
    
    int minSteps = 0;
    set<pair<int, int>> visited;
    queue<pair<int, int>> q;
    
    q.push({knightPos[0] - 1, knightPos[1] - 1});
    visited.insert({knightPos[0] - 1, knightPos[1] - 1});
    
    while (!q.empty()) {
        
        int size = q.size();
        
        for (int i = 0; i < size; i++) {
            auto curr = q.front();
            q.pop();
            
            if (curr.first == targetPos[0] - 1 && curr.second == targetPos[1] - 1)
                return minSteps;
            
            for (auto move : movements) {
                int newX = curr.first + move[0];
                int newY = curr.second + move[1];
                
                if (possible(newX, newY, n) && visited.find({newX, newY}) == visited.end()) {
                    visited.insert({newX, newY});
                    q.push({newX, newY});
                }
            }
        }
        
        minSteps++;
    }
    
    return -1;
}
