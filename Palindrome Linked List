bool compareList(Node *head1, Node *head2) {
    
    while(head1 && head2) {
        if(head1->data != head2->data)
            return false;
        head1 = head1->next;
        head2 = head2->next;
    }

    return true;
}

Node* findMiddle(Node *head) {

    Node *slow = head, *fast = head;

    while(fast && fast->next) {
        
        slow = slow->next;
        fast = fast->next;

        if(fast)
            fast = fast->next;
    }

    return slow;
}

Node* reverseList(Node *head) {

    if(head == NULL)
        return NULL;

    Node *prev = NULL, *curr = head, *after = head->next;

    while(curr) {
        curr->next = prev;
        prev = curr;
        curr = after;

        if(after)
            after = after->next;
    }
    
    return prev;
}

bool isPalindrome(Node *head) {
    
    if(head == NULL || head->next == NULL)
        return true;

    Node *temp = head;
    Node *mid = findMiddle(temp);
    Node *reverse = reverseList(mid);
    
    return compareList(head, reverse);
}
