bool cmp(pair<int, int> p1, pair<int, int> p2) {
    double ratio1 = (double) p1.first / (double) p1.second;
    double ratio2 = (double) p2.first / (double) p2.second;

    return ratio1 > ratio2;
}

class Solution {
  public:
    
    double fractionalKnapsack(vector<int>& values, vector<int>& weights, int w) {

        int n = values.size();
        vector<pair<int, int>> pairs(n);

        for(int i = 0; i < n; i++) {
            pairs[i].first = values[i];
            pairs[i].second = weights[i];
        }

        sort(pairs.begin(), pairs.end(), cmp);

        double totalValue = 0, currWeight = 0;
        for(int i = 0; i < n; i++) {
            if(pairs[i].second + currWeight <= w) {
                totalValue += pairs[i].first;
                currWeight += pairs[i].second;
            }
            else {
                double remaining = w - currWeight;
                totalValue += ( (double) pairs[i].first / (double) pairs[i].second) * remaining;
                break;
            }
        }

        return totalValue;
    }
};
