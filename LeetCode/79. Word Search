class Solution {
public:

    vector<vector<int>> dirs { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };

    bool dfs(vector<vector<char>> &board, string &word, int n, int i, int j, vector<vector<bool>> &visited) {

        if(n == 0)
            return true;

        int row = board.size(), col = board[0].size();
        visited[i][j] = true;

        for(auto dir : dirs) {
            int x = i + dir[0], y = j + dir[1];
            if(x >= 0 && x < row && y >= 0 && y < col)
                if(!visited[x][y] && board[x][y] == word[n-1])
                    if(dfs(board, word, n-1, x, y, visited))
                        return true;
        }

        visited[i][j] = false;
        return false;
    }

    bool exist(vector<vector<char>>& board, string word) {
        
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool> (n, false));

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(board[i][j] == word[word.size() - 1])
                    if( dfs(board, word, word.size() - 1, i, j, visited) )
                        return true;
        
        return false;
    }
};
