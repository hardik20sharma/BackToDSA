class Solution {

    vector<vector<int>> buildGraph(vector<vector<int>> &edges, int nodes) {
        
        vector<vector<int>> graph(nodes);

        for(auto edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }

        return graph;
    }

    void dfs(vector<vector<int>> &graph, int node, int parent, int diameter, int &maxDiameter, int &farthestNode) {

        if(diameter > maxDiameter) {
            maxDiameter = diameter;
            farthestNode = node;
        }

        for(auto next : graph[node]) {
            if(next == parent)
                continue;
            dfs(graph, next, node, diameter + 1, maxDiameter, farthestNode);
        }
    }

    int findDiameter(vector<vector<int>> &graph, int nodes) {

        int diameter = 0, farthestNode = 0;

        dfs(graph, 0, -1, 0, diameter, farthestNode);   // First we find one farthest node from any index (0 in this case)
        dfs(graph, farthestNode, -1, 0, diameter, farthestNode);    // This farthest node acts like a tree node, now we find the diameter or max depth

        return diameter;
    }

public:
    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {
        
        int n = edges1.size() + 1, m = edges2.size() + 1;

        vector<vector<int>> g1 = buildGraph(edges1, n);
        vector<vector<int>> g2 = buildGraph(edges2, m);

        // In case of trees, we check for leftDiameter, rightDiameter and a diameter including the node itself.
        // A similar theme plays in case of graph. We check for leftGraph, rightGraph and combination of diameter.

        int max1 = findDiameter(g1, n);
        int max2 = findDiameter(g2, m);
        int combined = ceil(max1/2.0) + ceil(max2/2.0) + 1;


        return max( { max1, max2, combined} );
    }
};
