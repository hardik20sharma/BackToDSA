class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        
        vector<vector<int>> graph(n);
        vector<bool> visited(n, false);

        for(auto edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }

        int component_cnt = 0;

        for(int i = 0; i < n; i++) {

            if(visited[i])
                continue;
            
            vector<int> component;
            queue<int> q;
            q.push(i);
            visited[i] = true;

            while(!q.empty()) {
                int curr = q.front();
                q.pop();
                component.push_back(curr);

                for(int nxt : graph[curr])
                    if(!visited[nxt]) {
                        visited[nxt] = true;
                        q.push(nxt);
                    }
            }

            bool is_complete = true;

            for(int node : component)
                if(graph[node].size() != component.size() - 1) {
                    is_complete = false;
                    break;
                }

            if(is_complete)
                component_cnt++;
        }

        return component_cnt;;
    }
};
