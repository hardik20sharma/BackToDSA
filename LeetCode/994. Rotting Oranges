class Solution {
public:

    bool possible(vector<vector<int>> &grid, int &m, int &n, int i, int j) {
        if(i < 0 || j < 0 || i >= m || j >= n)
            return false;
        return (grid[i][j] == 1);
    }

    int orangesRotting(vector<vector<int>> &grid) {

        int m = grid.size(), n = grid[0].size(), res = 0;
        vector<vector<int>> dir { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };

        queue<pair<int, int>> q;

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(grid[i][j] == 2)
                    q.push( {i, j} );

        q.push( {-1, -1} );

        while(!q.empty()) {
            auto [i, j] = q.front();
            q.pop();

            if (i == -1 && j == -1) {
                if (!q.empty()) {
                    res++;
                    q.push({-1, -1});
                }
                continue;
            }

            for(auto d : dir) {
                int newi = i + d[0], newj = j + d[1];
                if(possible(grid, m, n, newi, newj)) {
                    grid[newi][newj] = 2;
                    q.push( {newi, newj} );
                }
            }
        }

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(grid[i][j] == 1)
                    return -1;

        return res;
    }
};
