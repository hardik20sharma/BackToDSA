#define pii pair<int, int>
class Solution {

    vector<vector<int>> moves { {0, 1}, {1, 0}, {-1, 0}, {0, -1} };

    bool isMovePossible(int m, int n, int x, int y) {
        return (0 <= x && 0 <= y && x < m && y < n);
    }

public:
    vector<vector<int>> highestPeak(vector<vector<int>>& mat) {
        
        int m = mat.size(), n = mat[0].size();

        queue<pii> q;

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(mat[i][j] == 0)
                    mat[i][j] = INT_MAX;
                else
                    q.push( {i, j} );

        while(!q.empty()) {
            
            int x = q.front().first;
            int y = q.front().second;
            q.pop();

            for(auto move : moves) {
                int i = x + move[0], j = y + move[1];
                if(isMovePossible(m, n, i, j) && mat[i][j] > mat[x][y] + 1) {
                    mat[i][j] = mat[x][y] + 1;
                    q.push ( {i, j} );
                }       
            }
        }

        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                mat[i][j]--;

        return mat;
    }
};
