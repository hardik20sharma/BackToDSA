struct Node {
    bool wordEnd;
    Node *child[26];
};

class Trie {
    Node *node;
public:
    Trie() {
        node = new Node();
    }
    
    void insert(string word) {
        
        Node *temp = node;
        
        for(char c : word) {
            
            if(temp->child[c-'a'] == NULL)
                temp->child[c-'a'] = new Node();

            temp = temp->child[c-'a'];
        }

        temp->wordEnd = true;
    }
    
    bool search(string word) {
        
        Node *temp = node;

        for(char c : word) {
            
            if(temp->child[c-'a'] == NULL)
                return false;
            temp = temp->child[c-'a'];
        }
        return temp->wordEnd;
    }
    
    bool startsWith(string prefix) {
        Node *temp = node;

        for(char c : prefix) {
            
            if(temp->child[c-'a'] == NULL)
                return false;
            temp = temp->child[c-'a'];
        }

        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
