class Solution {

    bool isValid(vector<vector<char>> &board, int x, int y, char c) {

        int centerX = (x/3)*3 + 1, centerY = (y/3)*3 + 1;

        for(int i = -1; i <= 1; i++)
            for(int j = - 1; j <= 1; j++)
                if(board[centerX + i][centerY + j] == c)
                    return false;
        
        for(int i = 0; i < 9; i++)
            if(board[i][y] == c)
                return false;
        
        for(int j = 0; j < 9; j++)
            if(board[x][j] == c)
                return false;
        
        return true;
    }

    bool solve(vector<vector<char>> &board, int row, int col) {
        
        if(row == 9)
            return true;

        int nextRow = row, nextCol = col + 1;
        if(nextCol == 9) {
            nextRow = row + 1;
            nextCol = 0;
        }
        
        if(board[row][col] != '.')
            return solve(board, nextRow, nextCol);

        for(char c = '1'; c <= '9'; c++)
            if(isValid(board, row, col, c)) {
                board[row][col] = c;
                if(solve(board, nextRow, nextCol))
                    return true;
                board[row][col] = '.';
            }
        
        return false;
    }


public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board, 0, 0);
    }
};
