class Solution {
public:

    bool dfs(int curr, vector<vector<int>> &graph, vector<bool> &visited, vector<bool> &path) {

        path[curr] = true;
        visited[curr] = true;

        for(int i : graph[curr]) {
            if(!visited[i]) {
                if(dfs(i, graph, visited, path))
                    return true;
            }
            else if(path[i])
                return true;
        }

        path[curr] = false;
        return false;
    }

    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> res;
        vector<bool> visited(n, false);
        vector<bool> path(n, false);

        for(int i = 0; i < n; i++)
            if(!visited[i])
                dfs(i, graph, visited, path);

        for(int i = 0; i < n; i++)
            if(!path[i])
                res.push_back(i);
        
        return res;
    }
};
