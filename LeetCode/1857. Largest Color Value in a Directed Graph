class Solution {
public:

    int largestPathValue(string colors, vector<vector<int>>& edges) {
        
        int n = colors.size(), processed = 0, res = 0;
        
        vector<vector<int>> graph(n);
        vector<int> indegree(n, 0);
        vector<vector<int>> cnt(n, vector<int> (26, 0));

        queue<int> q;

        for(auto edge : edges)
            graph[edge[0]].push_back(edge[1]);

        for(int i = 0; i < n; i++)
            for(int nxt : graph[i])
                indegree[nxt]++;

        for(int i = 0; i < n; i++)
            if(indegree[i] == 0)
                q.push(i);

        while(!q.empty()) {
            
            int curr = q.front();
            q.pop();

            processed++;
            cnt[curr][colors[curr] - 'a']++;
            res = max(res, cnt[curr][colors[curr] - 'a']);

            for(int nxt : graph[curr]) {
                indegree[nxt]--;
                
                if(indegree[nxt] == 0)
                    q.push(nxt);
                
                for(int j = 0; j < 26; j++)
                    cnt[nxt][j] = max(cnt[nxt][j], cnt[curr][j]);
            }
        }

        return processed == n ? res : -1;
    }
};
