/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* helper(vector<int>& preorder, unordered_map<int, int> &mp, int &preIndex, int start, int end) {
        
        if(start > end)
            return nullptr;

        int curr = preorder[preIndex++];
        TreeNode* root = new TreeNode(curr);

        int inIndex = mp[curr];

        root->left = helper(preorder, mp, preIndex, start, inIndex-1);
        root->right = helper(preorder, mp, preIndex, inIndex+1, end);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        int n = inorder.size();
        int preIndex = 0;
        unordered_map<int, int> mp;

        for(int i = 0; i < n; i++)
            mp[inorder[i]] = i;

        return helper(preorder, mp, preIndex, 0, n-1);
    }
};
