/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    bool isIdentical(TreeNode *r1, TreeNode *r2) {

        if(r1 == NULL && r2 == NULL)
            return true;

        if(r1 == NULL || r2 == NULL)
            return false;

        if(r1->val != r2->val)
            return false;
        
        return isIdentical(r1->left, r2->left) && isIdentical(r1->right, r2->right);
    }

    bool solve(TreeNode *r1, TreeNode *r2) {

        if(r1 == NULL && r2 == NULL)
            return true;

        if(r1 == NULL || r2 == NULL)
            return false;
        
        if(r1->val == r2->val)
            if(isIdentical(r1, r2))
                return true;

        return solve(r1->left, r2) || solve(r1->right, r2);
    }

    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        return solve(root, subRoot);
    }
};
