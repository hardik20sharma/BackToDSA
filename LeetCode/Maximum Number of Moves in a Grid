class Solution {
public:

    int moves(int row, int col, vector<vector<int>> &grid, vector<vector<int>> &dp) {

        int m = grid.size(), n = grid[0].size(), maxMoves = 0;

        if(dp[row][col] != -1)
            return dp[row][col];

        for(int i = -1; i <= 1; i++) {

            int newRow = row + i, newCol = col + 1;

            if(newRow >= 0 && newCol >= 0 
                && newRow < m && newCol < n
                && grid[row][col] < grid[newRow][newCol])
                maxMoves = max(maxMoves, 1 + moves(newRow, newCol, grid, dp));
        }

        return dp[row][col] = maxMoves;
    }

    int maxMoves(vector<vector<int>>& grid) {

        int m = grid.size(), n = grid[0].size();

        vector<vector<int>> dp(m, vector<int>(n, -1));

        int maxMoves = 0;
        for(int i = 0; i < m; i++)
            maxMoves = max(maxMoves, moves(i, 0, grid, dp));

        return maxMoves;
    }
};
