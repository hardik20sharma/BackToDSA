class Solution {
public:

    vector<int> findMaxRight(vector<int> &height) {
        
        vector<int> res (height.begin(), height.end());

        for(int i = res.size() - 2; i >= 0; i--)
            res[i] = max(res[i], res[i+1]);

        return res;
    }

    vector<int> findMaxLeft(vector<int> &height) {
        
        vector<int> res (height.begin(), height.end());

        for(int i = 1; i < res.size(); i++)
            res[i] = max(res[i-1], res[i]);

        return res;
    }

    int trap(vector<int>& height) {
        
        vector<int> maxLeft = findMaxLeft(height);
        vector<int> maxRight = findMaxRight(height);

        int res = 0;

        for(int i = 0; i < height.size(); i++)
            res += ( min(maxLeft[i], maxRight[i]) - height[i]);

        return res;
    }
};
