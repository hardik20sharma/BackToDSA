class Solution {
public:
    int countUnguarded(int rows, int cols, vector<vector<int>>& guards, vector<vector<int>>& walls) {
        vector<vector<int>> grid(rows, vector<int>(cols, 0));

        for (auto wall : walls)
            grid[wall[0]][wall[1]] = 2;

        for (auto guard : guards)
            grid[guard[0]][guard[1]] = 3;

        for (auto guard : guards) {
            int guardRow = guard[0], guardCol = guard[1];

            for (int i = guardRow + 1; i < rows; i++) {
                if (grid[i][guardCol] == 2 || grid[i][guardCol] == 3)
                    break;
                grid[i][guardCol] = 1;
            }

            for (int i = guardRow - 1; i >= 0; i--) {
                if (grid[i][guardCol] == 2 || grid[i][guardCol] == 3)
                    break;
                grid[i][guardCol] = 1;
            }

            for (int i = guardCol + 1; i < cols; i++) {
                if (grid[guardRow][i] == 2 || grid[guardRow][i] == 3)
                    break;
                grid[guardRow][i] = 1;
            }

            for (int i = guardCol - 1; i >= 0; i--) {
                if (grid[guardRow][i] == 2 || grid[guardRow][i] == 3)
                    break;
                grid[guardRow][i] = 1;
            }
        }

        int unguardedCells = 0;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 0)
                    unguardedCells++;
            }
        }
        return unguardedCells;
    }
};
