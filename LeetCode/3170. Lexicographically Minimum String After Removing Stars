class Solution {
public:
    string clearStars(string s) {

        int n = s.size();
        priority_queue<char, vector<char>, greater<char>> pq;  // Min-heap
        unordered_map<char, vector<int>> mp;  // Stores indices of each character
        vector<bool> visited(n, true);  // Marks whether each char in s should be kept

        for (int i = 0; i < n; i++)
            if (s[i] == '*') {
                char temp = pq.top();  // Get smallest char so far
                pq.pop();

                int last = mp[temp].back();  // Get last occurrence index
                mp[temp].pop_back();

                visited[i] = false;       // Remove '*'
                visited[last] = false;    // Remove corresponding smallest char
            } else {
                pq.push(s[i]);
                mp[s[i]].push_back(i);
            }

        string result = "";
        for (int i = 0; i < n; i++)
            if (visited[i])
                result += s[i];

        return result;
    }
};
