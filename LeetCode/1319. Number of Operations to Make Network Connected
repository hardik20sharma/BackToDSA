class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        
        if(connections.size() < n-1)
            return -1;

        vector<vector<int>> graph(n);
        vector<bool> visited(n, false);

        for(auto connection : connections) {
            graph[connection[0]].push_back(connection[1]);
            graph[connection[1]].push_back(connection[0]);
        }

        int cntSubGraph = 0;

        for(int i = 0; i < n; i++) {

            if(visited[i])
                continue;

            cntSubGraph++;

            queue<int> q;
            q.push(i);
            visited[i] = true;

            while(!q.empty()) {
                int curr = q.front();
                q.pop();

                for(int nxt : graph[curr])
                    if(!visited[nxt]) {
                        visited[nxt] = true;
                        q.push(nxt);
                    }
            }
        }
        
        return cntSubGraph - 1;
    }
};
