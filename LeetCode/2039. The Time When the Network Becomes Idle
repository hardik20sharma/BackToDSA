class Solution {
public:
    int networkBecomesIdle(vector<vector<int>>& edges, vector<int>& patience) {
        
        int n = patience.size();
        vector<vector<int>> graph(n);

        for(auto edge : edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }

        vector<int> visited(n, INT_MAX);
        queue<int> q;
        q.push(0);
        visited[0] = 0;

        while(!q.empty()) {
            int curr = q.front();
            q.pop();

            for(int nxt : graph[curr])
                if(visited[nxt] > visited[curr] + 1) {
                    visited[nxt] = visited[curr] + 1;
                    q.push(nxt);
                }
        }

        int res = 0;

        for(int i = 1; i < n; i++) {
            int roundTrip = visited[i] * 2;
            int numMessages = (roundTrip - 1) / patience[i];
            int lastResendingTime = patience[i] * numMessages;
            int lastArrivingTime = lastResendingTime + roundTrip;
            res = max(res, lastArrivingTime);
        }
        
        return res + 1;
    }
};
