class Solution {
public:

    void dfs(int node, vector<vector<int>> &forward, vector<vector<int>> &backward, vector<bool> &visited, int &ans) {

        visited[node] = true;

        for(int i : forward[node])
            if(!visited[i]) {
                ans += 1;
                dfs(i, forward, backward, visited, ans);
            }
        
        for(int i : backward[node])
            if(!visited[i])
                dfs(i, forward, backward, visited, ans);
    }

    int minReorder(int n, vector<vector<int>>& connections) {
        
        vector<vector<int>> forward(n), backward(n);
        vector<bool> visited(n);

        for(auto connection : connections) {
            forward[connection[0]].push_back(connection[1]);
            backward[connection[1]].push_back(connection[0]);
        }

        int ans = 0;
        dfs(0, forward, backward, visited, ans);
        return ans;
    }
};
