/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        int carry = 0;

        ListNode* res = new ListNode();
        ListNode* curr = new ListNode();

        curr = res;

        while(l1 != NULL && l2 != NULL) {
            
            curr->val = (l1->val + l2->val + carry) % 10;
            carry = (l1->val + l2->val + carry) / 10;
            
            l1 = l1->next;
            l2 = l2->next;
            
            if(l1 || l2) {
                curr->next = new ListNode();
                curr = curr->next;
            }
        }

        while(l1 != NULL) {
            curr->val = (l1->val + carry) % 10;
            carry = (l1->val + carry) / 10;

            l1 = l1->next;

            if(l1!= NULL) {
                curr->next = new ListNode();
                curr = curr->next;
            }
        }

        while(l2 != NULL) {
            curr->val = (l2->val + carry) % 10;
            carry = (l2->val + carry) / 10;

            l2 = l2->next;

            if(l2!= NULL) {
                curr->next = new ListNode();
                curr = curr->next;
            }
        }

        if(carry > 0) {
            curr->next = new ListNode();
            curr = curr->next;
            curr->val = carry;
        }

        return res;
    }
};
