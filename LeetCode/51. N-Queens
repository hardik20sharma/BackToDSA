class Solution {

    bool isSafe(vector<vector<bool>> &board, int &row, int &col) {
        
        int n = board.size();

        for(int j = 0; j < col; j++)
            if(board[row][j])
                return false;
        
        for(int i = row, j = col; 0 <= i && 0 <= j; i--, j--)
            if(board[i][j])
                return false;

        for(int i = row, j = col; i < n && 0 <= j ; i++, j--)
            if(board[i][j])
                return false;

        return true;
    }

    void insertRes(vector<vector<string>> &res, vector<vector<bool>> &board) {
        
        vector<string> subRes;
        
        for(int i = 0; i < board.size(); i++) {
            
            string s = "";
            for(int j = 0; j < board.size(); j++)
                s += board[i][j] ? 'Q' : '.';
            
            subRes.push_back(s);
        }
        
        res.push_back(subRes);
    }

    void placeQueen(vector<vector<string>> &res, vector<vector<bool>> &board, int col) {
        
        if (col == board.size()) {
            insertRes(res, board);
            return;
        }

        for (int row = 0; row < board.size(); row++) {
            if (isSafe(board, row, col)) {
                board[row][col] = true;
                placeQueen(res, board, col + 1);
                board[row][col] = false;
            }
        }
    }

public:
    vector<vector<string>> solveNQueens(int n) {
        
        vector<vector<string>> res;
        vector<vector<bool>> board(n, vector<bool> (n, false));

        placeQueen(res, board, 0);

        return res;
    }
};
